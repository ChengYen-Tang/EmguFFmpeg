<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EmguFFmpeg</name>
    </assembly>
    <members>
        <member name="M:EmguFFmpeg.FFmpegHelper.SetupLogging(System.Int32,System.Int32)">
             <summary>
             Set ffmpeg internal log
             </summary>
             <param name="logLevel">
             log level
             <list type="bullet">
                <item>
                    <term>64</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_MAX_OFFSET"/></description>
                </item>
                <item>
                    <term>56</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_TRACE"/></description>
                </item>
                <item>
                    <term>48</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_DEBUG"/></description>
                </item>
                <item>
                    <term>40</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_VERBOSE"/></description>
                </item>
                <item>
                    <term>16</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_ERROR"/></description>
                </item>
                <item>
                    <term>24</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_WARNING"/></description>
                </item>
                <item>
                    <term>8</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_FATAL"/></description>
                </item>
                <item>
                    <term>0</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_PANIC"/></description>
                </item>
                <item>
                    <term>-8</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_QUIET"/></description>
                </item>
            </list>
             </param>
             <param name="logFlags">
             log flags, support AND operator
             <list type="bullet">
                <item>
                    <term>1</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_SKIP_REPEATED"/></description>
                </item>
                <item>
                    <term>2</term>
                    <description><see cref="F:FFmpeg.AutoGen.ffmpeg.AV_LOG_PRINT_LEVEL"/></description>
                </item>
             </list>
             </param>
        </member>
        <member name="T:EmguFFmpeg.VideoFrameConverter">
            <summary>
            图像转码器
            </summary>
        </member>
        <member name="T:EmguFFmpeg.AudioFrameConverter">
            <summary>
            音频转码器
            </summary>
        </member>
        <member name="M:EmguFFmpeg.AudioFrameConverter.Convert(EmguFFmpeg.MediaFrame)">
            <summary>
            TODO fix test
            </summary>
            <param name="srcFrame"></param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaDecode.#ctor(FFmpeg.AutoGen.AVCodecID)">
            <summary>
            Call <see cref="M:EmguFFmpeg.MediaDecode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)"/> before decode
            </summary>
            <param name="codecId">codec id</param>
        </member>
        <member name="M:EmguFFmpeg.MediaDecode.#ctor(System.String)">
            <summary>
            Call <see cref="M:EmguFFmpeg.MediaDecode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)"/> before decode
            </summary>
            <param name="codecName">codec name</param>
        </member>
        <member name="M:EmguFFmpeg.MediaDecode.#ctor(FFmpeg.AutoGen.AVCodec*)">
            <summary>
            Call <see cref="M:EmguFFmpeg.MediaDecode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)"/> before decode
            </summary>
            <param name="codec"></param>
        </member>
        <member name="M:EmguFFmpeg.MediaDecode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)">
            <summary>
            alloc <see cref="T:FFmpeg.AutoGen.AVCodecContext"/> and <see cref="M:FFmpeg.AutoGen.ffmpeg.avcodec_open2(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVCodec*,FFmpeg.AutoGen.AVDictionary**)"/>
            </summary>
            <param name="setBeforeOpen">
            set "AVCodecContext" after "avcodec_alloc_context3" and before "avcodec_open2"
            </param>
            <param name="flags">not used</param>
            <param name="opts">options for "avcodec_open2"</param>
        </member>
        <member name="M:EmguFFmpeg.MediaEncode.CreateVideoEncode(FFmpeg.AutoGen.AVCodecID,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,FFmpeg.AutoGen.AVPixelFormat)">
            <summary>
            Create video encode
            </summary>
            <param name="videoCodec"></param>
            <param name="flags"></param>
            <param name="width">width pixel</param>
            <param name="height">height pixel</param>
            <param name="fps"></param>
            <param name="bitRate">default is auto bitrate</param>
            <param name="format">default is SupportedPixelFmts[0]</param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaEncode.CreateAudioEncode(FFmpeg.AutoGen.AVCodecID,System.Int32,EmguFFmpeg.AVChannelLayout,System.Int32,System.Int64,FFmpeg.AutoGen.AVSampleFormat)">
            <summary>
            Create audio encode
            </summary>
            <param name="audioCodec"></param>
            <param name="flags"></param>
            <param name="channelLayout">
            ffmpeg.AV_CH_LAYOUT_XXX, also get from <see
            cref="M:FFmpeg.AutoGen.ffmpeg.av_get_default_channel_layout(System.Int32)"/> by channels
            </param>
            <param name="sampleRate">default is SupportedSampleRates[0]</param>
            <param name="bitRate">default is auto bitrate</param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaEncode.#ctor(FFmpeg.AutoGen.AVCodecID)">
            <summary>
            Call <see cref="M:EmguFFmpeg.MediaEncode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)"/> before encode
            </summary>
            <param name="codecId">codec id</param>
        </member>
        <member name="M:EmguFFmpeg.MediaEncode.#ctor(System.String)">
            <summary>
            Call <see cref="M:EmguFFmpeg.MediaEncode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)"/> before encode
            </summary>
            <param name="codecName">codec name</param>
        </member>
        <member name="M:EmguFFmpeg.MediaEncode.#ctor(FFmpeg.AutoGen.AVCodec*)">
            <summary>
            Call <see cref="M:EmguFFmpeg.MediaEncode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)"/> before encode
            </summary>
            <param name="codec"></param>
        </member>
        <member name="M:EmguFFmpeg.MediaEncode.Initialize(System.Action{EmguFFmpeg.MediaCodec},System.Int32,EmguFFmpeg.MediaDictionary)">
            <summary>
            alloc <see cref="T:FFmpeg.AutoGen.AVCodecContext"/> and <see cref="M:FFmpeg.AutoGen.ffmpeg.avcodec_open2(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVCodec*,FFmpeg.AutoGen.AVDictionary**)"/>
            </summary>
            <param name="setBeforeOpen">
            set "AVCodecContext" after "avcodec_alloc_context3" and before "avcodec_open2"
            </param>
            <param name="flags">
            use " <see cref="P:EmguFFmpeg.MediaFormat.Flags"/>" for set " <see cref="F:FFmpeg.AutoGen.AVCodecContext.flags"/>" with
            " <see cref="F:FFmpeg.AutoGen.ffmpeg.AV_CODEC_FLAG_GLOBAL_HEADER"/>"
            </param>
            <param name="opts">options for "avcodec_open2"</param>
        </member>
        <member name="M:EmguFFmpeg.MediaEncode.PreProcessFrame(EmguFFmpeg.MediaFrame)">
            <summary>
            pre process frame
            </summary>
            <param name="frame"></param>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_BACK_CENTER">
            <summary>
                AV_CH_BACK_CENTER = 0x00000100
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_BACK_LEFT">
            <summary>
                AV_CH_BACK_LEFT = 0x00000010
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_BACK_RIGHT">
            <summary>
                AV_CH_BACK_RIGHT = 0x00000020
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_FRONT_CENTER">
            <summary>
                AV_CH_FRONT_CENTER = 0x00000004
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_FRONT_LEFT">
            <summary>
                AV_CH_FRONT_LEFT = 0x00000001
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_FRONT_LEFT_OF_CENTER">
            <summary>
                AV_CH_FRONT_LEFT_OF_CENTER = 0x00000040
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_FRONT_RIGHT">
            <summary>
                AV_CH_FRONT_RIGHT = 0x00000002
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_FRONT_RIGHT_OF_CENTER">
            <summary>
                AV_CH_FRONT_RIGHT_OF_CENTER = 0x00000080
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_2_1">
            <summary>
                AV_CH_LAYOUT_2_1 = (AV_CH_LAYOUT_STEREO|AV_CH_BACK_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_2_2">
            <summary>
                AV_CH_LAYOUT_2_2 = (AV_CH_LAYOUT_STEREO|AV_CH_SIDE_LEFT|AV_CH_SIDE_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_2POINT1">
            <summary>
                AV_CH_LAYOUT_2POINT1 = (AV_CH_LAYOUT_STEREO|AV_CH_LOW_FREQUENCY)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_3POINT1">
            <summary>
                AV_CH_LAYOUT_3POINT1 = (AV_CH_LAYOUT_SURROUND|AV_CH_LOW_FREQUENCY)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_4POINT0">
            <summary>
                AV_CH_LAYOUT_4POINT0 = (AV_CH_LAYOUT_SURROUND|AV_CH_BACK_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_4POINT1">
            <summary>
                AV_CH_LAYOUT_4POINT1 = (AV_CH_LAYOUT_4POINT0|AV_CH_LOW_FREQUENCY)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_5POINT0">
            <summary>
                AV_CH_LAYOUT_5POINT0 = (AV_CH_LAYOUT_SURROUND|AV_CH_SIDE_LEFT|AV_CH_SIDE_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_5POINT0_BACK">
            <summary>
                AV_CH_LAYOUT_5POINT0_BACK = (AV_CH_LAYOUT_SURROUND|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_5POINT1">
            <summary>
                AV_CH_LAYOUT_5POINT1 = (AV_CH_LAYOUT_5POINT0|AV_CH_LOW_FREQUENCY)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_5POINT1_BACK">
            <summary>
                AV_CH_LAYOUT_5POINT1_BACK = (AV_CH_LAYOUT_5POINT0_BACK|AV_CH_LOW_FREQUENCY)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_6POINT0">
            <summary>
                AV_CH_LAYOUT_6POINT0 = (AV_CH_LAYOUT_5POINT0|AV_CH_BACK_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_6POINT0_FRONT">
            <summary>
                AV_CH_LAYOUT_6POINT0_FRONT = (AV_CH_LAYOUT_2_2|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_6POINT1">
            <summary>
                AV_CH_LAYOUT_6POINT1 = (AV_CH_LAYOUT_5POINT1|AV_CH_BACK_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_6POINT1_BACK">
            <summary>
                AV_CH_LAYOUT_6POINT1_BACK = (AV_CH_LAYOUT_5POINT1_BACK|AV_CH_BACK_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_6POINT1_FRONT">
            <summary>
                AV_CH_LAYOUT_6POINT1_FRONT = (AV_CH_LAYOUT_6POINT0_FRONT|AV_CH_LOW_FREQUENCY)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_7POINT0">
            <summary>
                AV_CH_LAYOUT_7POINT0 = (AV_CH_LAYOUT_5POINT0|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_7POINT0_FRONT">
            <summary>
                AV_CH_LAYOUT_7POINT0_FRONT = (AV_CH_LAYOUT_5POINT0|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_7POINT1">
            <summary>
                AV_CH_LAYOUT_7POINT1 = (AV_CH_LAYOUT_5POINT1|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_7POINT1_WIDE">
            <summary>
                AV_CH_LAYOUT_7POINT1_WIDE = (AV_CH_LAYOUT_5POINT1|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_7POINT1_WIDE_BACK">
            <summary>
                AV_CH_LAYOUT_7POINT1_WIDE_BACK = (AV_CH_LAYOUT_5POINT1_BACK|AV_CH_FRONT_LEFT_OF_CENTER|AV_CH_FRONT_RIGHT_OF_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_HEXADECAGONAL">
            <summary>
                AV_CH_LAYOUT_HEXADECAGONAL = (AV_CH_LAYOUT_OCTAGONAL|AV_CH_WIDE_LEFT|AV_CH_WIDE_RIGHT|AV_CH_TOP_BACK_LEFT|AV_CH_TOP_BACK_RIGHT|AV_CH_TOP_BACK_CENTER|AV_CH_TOP_FRONT_CENTER|AV_CH_TOP_FRONT_LEFT|AV_CH_TOP_FRONT_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_HEXAGONAL">
            <summary>
                AV_CH_LAYOUT_HEXAGONAL = (AV_CH_LAYOUT_5POINT0_BACK|AV_CH_BACK_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_MONO">
            <summary>
                AV_CH_LAYOUT_MONO = (AV_CH_FRONT_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_NATIVE">
            <summary>
                AV_CH_LAYOUT_NATIVE = 0x8000000000000000ULL
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_OCTAGONAL">
            <summary>
                AV_CH_LAYOUT_OCTAGONAL = (AV_CH_LAYOUT_5POINT0|AV_CH_BACK_LEFT|AV_CH_BACK_CENTER|AV_CH_BACK_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_QUAD">
            <summary>
                AV_CH_LAYOUT_QUAD = (AV_CH_LAYOUT_STEREO|AV_CH_BACK_LEFT|AV_CH_BACK_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_STEREO">
            <summary>
                AV_CH_LAYOUT_STEREO = (AV_CH_FRONT_LEFT|AV_CH_FRONT_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_STEREO_DOWNMIX">
            <summary>
                AV_CH_LAYOUT_STEREO_DOWNMIX = (AV_CH_STEREO_LEFT|AV_CH_STEREO_RIGHT)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LAYOUT_SURROUND">
            <summary>
                AV_CH_LAYOUT_SURROUND = (AV_CH_LAYOUT_STEREO|AV_CH_FRONT_CENTER)
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LOW_FREQUENCY">
            <summary>
                AV_CH_LOW_FREQUENCY = 0x00000008
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_LOW_FREQUENCY_2">
            <summary>
                AV_CH_LOW_FREQUENCY_2 = 0x0000000800000000ULL
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_SIDE_LEFT">
            <summary>
                AV_CH_SIDE_LEFT = 0x00000200
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_SIDE_RIGHT">
            <summary>
                AV_CH_SIDE_RIGHT = 0x00000400
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_STEREO_LEFT">
            <summary>
                AV_CH_STEREO_LEFT = 0x20000000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_STEREO_RIGHT">
            <summary>
                AV_CH_STEREO_RIGHT = 0x40000000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_SURROUND_DIRECT_LEFT">
            <summary>
                AV_CH_SURROUND_DIRECT_LEFT = 0x0000000200000000ULL
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_SURROUND_DIRECT_RIGHT">
            <summary>
                AV_CH_SURROUND_DIRECT_RIGHT = 0x0000000400000000ULL
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_TOP_BACK_CENTER">
            <summary>
                AV_CH_TOP_BACK_CENTER = 0x00010000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_TOP_BACK_LEFT">
            <summary>
                AV_CH_TOP_BACK_LEFT = 0x00008000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_TOP_BACK_RIGHT">
            <summary>
                AV_CH_TOP_BACK_RIGHT = 0x00020000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_TOP_CENTER">
            <summary>
                AV_CH_TOP_CENTER = 0x00000800
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_TOP_FRONT_CENTER">
            <summary>
                AV_CH_TOP_FRONT_CENTER = 0x00002000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_TOP_FRONT_LEFT">
            <summary>
                AV_CH_TOP_FRONT_LEFT = 0x00001000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_TOP_FRONT_RIGHT">
            <summary>
                AV_CH_TOP_FRONT_RIGHT = 0x00004000
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_WIDE_LEFT">
            <summary>
                AV_CH_WIDE_LEFT = 0x0000000080000000ULL
            </summary>
        </member>
        <member name="F:EmguFFmpeg.AVChannelLayout.AV_CH_WIDE_RIGHT">
            <summary>
                AV_CH_WIDE_RIGHT = 0x0000000100000000ULL
            </summary>
        </member>
        <member name="F:EmguFFmpeg.MediaDictionary.internalPointerPlaceHolder">
            <summary>
            DO NOT USE THIS VALUE EVER.
            <para>
            get real pointer by *(<see cref="F:EmguFFmpeg.MediaDictionary.ppDictionary"/>)
            or use implicit conversion operator
            from <see cref="T:EmguFFmpeg.MediaDictionary"/> to <see cref="T:FFmpeg.AutoGen.AVDictionary"/>*
            </para>
            </summary>
        </member>
        <member name="F:EmguFFmpeg.MediaDictionary.ppDictionary">
            <summary>
            NOTE: ffmpeg maybe change the value of *<see cref="F:EmguFFmpeg.MediaDictionary.ppDictionary"/>
            </summary>
        </member>
        <member name="F:EmguFFmpeg.DictFlags.AV_DICT_NONE">
            <summary>
            Default is case insensitive.
            </summary>
        </member>
        <member name="F:EmguFFmpeg.DictFlags.AV_DICT_MATCH_CASE">
            <summary>
            Only get an entry with exact-case key match. Only relevant in get method.
            <para>Add("k1","v1",DictFlags.AV_DICT_IGNORE_SUFFIX);</para>
            <para>//get "k1" == "v1"</para>
            <para>//get "K1" == null</para>
            </summary>
        </member>
        <member name="F:EmguFFmpeg.DictFlags.AV_DICT_IGNORE_SUFFIX">
            <summary>
            Return first entry in a dictionary whose first part corresponds to the search key,
            ignoring the suffix of the found key string. Only relevant in get method.
            <para>Add("k1","v1",DictFlags.AV_DICT_IGNORE_SUFFIX);</para>
            <para>//get "k" == "v1"</para>
            </summary>
        </member>
        <member name="F:EmguFFmpeg.DictFlags.AV_DICT_DONT_OVERWRITE">
            <summary>
            Don't overwrite existing key.
            <para>Add("k1",v1);</para>
            <para>Add("k1","v2",DictFlags.AV_DICT_DONT_OVERWRITE);</para>
            <para>//"k1" == "v1"</para>
            </summary>
        </member>
        <member name="F:EmguFFmpeg.DictFlags.AV_DICT_APPEND">
            <summary>
            If the key already exists, append to it's value.
            <para>Add("k1",v1);</para>
            <para>Add("k1","v2",DictFlags.AV_DICT_APPEND);</para>
            <para>//"k1" == "v1v2"</para>
            </summary>
        </member>
        <member name="F:EmguFFmpeg.DictFlags.AV_DICT_MULTIKEY">
            <summary>
            Allow to store several equal keys in the dictionary
            <para>Add("k1",v1);</para>
            <para>Add("k1","v2",DictFlags.AV_DICT_MULTIKEY);</para>
            <para>//"k1" == {"v1","v2"}</para>
            </summary>
        </member>
        <member name="M:EmguFFmpeg.OutFormat.GuessFormat(System.String,System.String,System.String)">
            <summary>
            Return the output format in the list of registered output formats which best matches the
            provided parameters, or return NULL if there is no match.
            </summary>
            <param name="shortName">
            if non-NULL checks if short_name matches with the names of the registered formats
            </param>
            <param name="fileName">
            if non-NULL checks if filename terminates with the extensions of the registered formats
            </param>
            <param name="mimeType">
            if non-NULL checks if mime_type matches with the MIME type of the registered formats
            </param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaFrame.Clone``1">
            <summary>
            Deep clone frame
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaFrame.GetData">
            <summary>
            Get managed copy of <see cref="F:FFmpeg.AutoGen.AVFrame.data"/> by <see cref="F:FFmpeg.AutoGen.AVFrame.linesize"/>
            <para>
            NOTE: length maybe greater than valid data, because memory alignment.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.AudioFrame.#ctor(FFmpeg.AutoGen.AVSampleFormat,EmguFFmpeg.AVChannelLayout,System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="format"><see cref="F:FFmpeg.AutoGen.AVCodecContext.sample_fmt"/></param>
            <param name="channelLayout"><see cref="F:FFmpeg.AutoGen.AVCodecContext.channel_layout"/></param>
            <param name="nbSamples"><see cref="F:FFmpeg.AutoGen.AVCodecContext.frame_size"/></param>
            <param name="sampleRate"><see cref="F:FFmpeg.AutoGen.AVCodecContext.sample_rate"/></param>
            <param name="align">
            Required buffer size alignment. If equal to 0, alignment will be chosen automatically for
            the current CPU. It is highly recommended to pass 0 here unless you know what you are doing.
            </param>
        </member>
        <member name="M:EmguFFmpeg.MediaPacket.Clear">
            <summary>
            <see cref="M:FFmpeg.AutoGen.ffmpeg.av_packet_unref(FFmpeg.AutoGen.AVPacket*)"/>
            </summary>
        </member>
        <member name="M:EmguFFmpeg.MediaPacket.Clone">
            <summary>
            Deep copy
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.av_packet_ref(FFmpeg.AutoGen.AVPacket*,FFmpeg.AutoGen.AVPacket*)"/></para>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.av_packet_copy_props(FFmpeg.AutoGen.AVPacket*,FFmpeg.AutoGen.AVPacket*)"/></para>
            </summary>
            <exception cref="T:EmguFFmpeg.FFmpegException"/>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaStream.ReadFrame(EmguFFmpeg.MediaPacket)">
            <summary>
            Read a fram from <see cref="T:EmguFFmpeg.MediaPacket"/>
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaStream.WriteFrame(EmguFFmpeg.MediaFrame)">
            <summary>
            Write a fram by <see cref="P:EmguFFmpeg.MediaStream.Codec"/>.
            <para><see cref="M:EmguFFmpeg.MediaEncode.EncodeFrame(EmguFFmpeg.MediaFrame)"/></para>
            <para><see cref="M:EmguFFmpeg.MediaStream.FixPacket(EmguFFmpeg.MediaPacket)"/></para>
            </summary>
            <param name="frame"></param>
            <exception cref="T:EmguFFmpeg.FFmpegException"/>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaStream.FixPacket(EmguFFmpeg.MediaPacket)">
            <summary>
            convert packet pts from <see cref="F:FFmpeg.AutoGen.AVCodecContext.time_base"/> to <see
            cref="F:FFmpeg.AutoGen.AVStream.time_base"/> and set <see cref="F:FFmpeg.AutoGen.AVPacket.stream_index"/>
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:EmguFFmpeg.MediaStream.ToTimeSpan(System.Int64)">
            <summary>
            Convert to TimeSpan use <see cref="P:EmguFFmpeg.MediaStream.TimeBase"/>
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaWriter.#ctor(System.String,EmguFFmpeg.OutFormat,EmguFFmpeg.MediaDictionary)">
            <summary>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.avformat_alloc_output_context2(FFmpeg.AutoGen.AVFormatContext**,FFmpeg.AutoGen.AVOutputFormat*,System.String,System.String)"/></para>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.avio_open(FFmpeg.AutoGen.AVIOContext**,System.String,System.Int32)"/></para>
            </summary>
            <param name="file"></param>
            <param name="oformat"></param>
            <param name="options"></param>
        </member>
        <member name="M:EmguFFmpeg.MediaWriter.DumpInfo">
            <summary>
            <see cref="M:FFmpeg.AutoGen.ffmpeg.av_dump_format(FFmpeg.AutoGen.AVFormatContext*,System.Int32,System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="M:EmguFFmpeg.MediaWriter.AddStream(EmguFFmpeg.MediaEncode)">
            <summary>
            Add stream by encode
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.avformat_new_stream(FFmpeg.AutoGen.AVFormatContext*,FFmpeg.AutoGen.AVCodec*)"/></para>
            <para>set <see cref="F:FFmpeg.AutoGen.AVStream.id"/></para>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.avcodec_parameters_from_context(FFmpeg.AutoGen.AVCodecParameters*,FFmpeg.AutoGen.AVCodecContext*)"/></para>
            <para>set <see cref="F:FFmpeg.AutoGen.AVStream.time_base"/> from <see cref="F:FFmpeg.AutoGen.AVCodecContext.time_base"/></para>
            </summary>
            <param name="encode">Used to codec stream.
            <para>
            set null to add a data stream but no encoder,
            then use <see cref="M:EmguFFmpeg.MediaWriter.WritePacket(EmguFFmpeg.MediaPacket)"/> write data directly.
            </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaWriter.Initialize(EmguFFmpeg.MediaDictionary)">
            <summary>
            <see cref="M:FFmpeg.AutoGen.ffmpeg.avformat_write_header(FFmpeg.AutoGen.AVFormatContext*,FFmpeg.AutoGen.AVDictionary**)"/>
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:EmguFFmpeg.MediaWriter.WritePacket(EmguFFmpeg.MediaPacket)">
            <summary>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.av_interleaved_write_frame(FFmpeg.AutoGen.AVFormatContext*,FFmpeg.AutoGen.AVPacket*)"/></para>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.av_packet_unref(FFmpeg.AutoGen.AVPacket*)"/></para>
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:EmguFFmpeg.MediaWriter.FlushMuxer">
            <summary>
            send null frame and receive packet to flush encoder cache.
            <para><see cref="M:EmguFFmpeg.MediaStream.WriteFrame(EmguFFmpeg.MediaFrame)"/></para>
            <para><see cref="M:EmguFFmpeg.MediaWriter.WritePacket(EmguFFmpeg.MediaPacket)"/></para>
            </summary>
        </member>
        <member name="M:EmguFFmpeg.MediaWriter.Dispose(System.Boolean)">
            <summary>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.av_write_trailer(FFmpeg.AutoGen.AVFormatContext*)"/></para>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.avio_close(FFmpeg.AutoGen.AVIOContext*)"/></para>
            <para><see cref="M:FFmpeg.AutoGen.ffmpeg.avformat_free_context(FFmpeg.AutoGen.AVFormatContext*)"/></para>
            </summary>
            <param name="disposing"></param>
        </member>
    </members>
</doc>
